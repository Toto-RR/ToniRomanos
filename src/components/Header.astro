---
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@/i18n/utils"
import LanguageToggle from "./LanguageToggle.astro"
import ThemeToggle from "./ThemeToggle.astro"

const lang  = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const navItems = [
{
    title: t('nav.projects'),
    label: "proyectos",
    url: translatePath('/#proyectos'),
  },
  {
    title: t('nav.skills'),
    label: "habilidades",
    url: translatePath('/#habilidades'),
  },
  {
    title: t('nav.studies'),
    label: "experiencia",
    url: translatePath('/#experiencia'),
  },
  {
    title: t('nav.about'),
    label: "sobre-mi",
    url: translatePath('/#sobre-mi'),
  },
  {
    title: t('nav.contact'),
    label: "contacto",
    url: "mailto:toto.romanos.ruiz@gmail.com",
  },
]
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2 mb-2 px-1"
>
  <nav
    class="flex flex-wrap text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center px-2 py-1"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-1 transition hover:text-blue-500 dark:hover:text-blue-500"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
    <ThemeToggle />
    <LanguageToggle />
  </nav>
</header>


<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500")
            } else {
              item.classList.remove("text-blue-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  nav {
    @apply dark:bg-gray-800/90 bg-white/50;
  }

  @keyframes nav-shadown {
    0% {
      @apply dark:bg-gray-800/0 bg-white/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur ring-white/10;
    }
  }
</style>
